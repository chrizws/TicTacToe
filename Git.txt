Git - open source and free source control management (SCM) or version control system (VCS)

Manage changes to files over time, view previous changes, compare different versions, track changes



//SETUP AND INITIALIZATION
setup user name
	$ git config --global user.name "First Last"

setup email address
	$ git config --global user.email "test@gmail.com"

initialize repository
	$ cd c:\folder\repository
	$ git init //initializes the directory as a git repository

state of working directory and staging area
	$ git status //shows tracked and untracked files




//STAGING
if file is not staged (tracked) then Git will not keep any record of that file

to stage a single file to the staging environment
	$ git add filename.txt (case sensitive and include file extension)

to track all the files in a folder to the staging area
	$ git add .
	$ git add A
	$ git add --All

to unstage or untrack a file from the staging environment
	$ git rm --cached filename.txt

to ignore files and prevent tracking
	//create .gitignore file or use powershell "ren gitignore.txt .gitignore" to rename gitignore.txt to .gitignore file
	//add file name or *.ext to ignore all ext type files

reset staging area to the last commit
	$ git reset




//COMMIT
Commit is a "save point" or snapshot of files from the staging area
	$ git commit -m "insert commit message here"
	
skipping the staging area and commit directly
	$ git commit -a -m "commit directly and skip staging"

to display changes in the committed file vs what's changed in the uncomitted file
	$ git diff

to delete file from staging and working directory
	$ git rm filename

to restore file that was deleted
	$ git restore --staged filename (if used git rm filename)
	$ git restore filename (if deleted from file explorer)




//REVERSE STAGING
working directory to commit directly without going to staging 
	$ git commit -a -m "commit directly and skips staging"
		
remove from staging area back to working directory
	$ git restore --staged filename
		
commit takes the changes made into the log




//LOG AND HISTORY
to view all the commit history
	$ git log
	$ git log --oneline (formats the entry to one line)

to amend the last committed message
	$ git commit -m "change the last committed message" --amend

to view comprehensive changes in the log
	$ git log -p

to restore to a previous committed versions
	$ git reset hashcode

rebasing modifies commit orders, removals, and other advance changes to commits
	$ git rebase -i --root




//CREATING AND SWITCHING BRANCHES
create a new branch
	$ git branch branchName

view current branches
	$ git branch

switch branch
	$ git switch branchName
	
create and switch to new branch
	$ git switch -c branchName




//MERGING AND DELETING BRANCH
merge the branches together
	$ git switch main //switch to the main branch for merging
	$ git merge -m "merge message" branchToMerge

delete a branch after merging 
	$ git branch -d branchName





//REMOTE REPOSITORY
create connection to remote repository
	$ git remote add origin http://github.com/user/repo.git
	
	$ git branch -M main //target the main branch on github
	
	$ git push -u origin main //push the local main branch
	
push all the branches
	$ git push --all 
	
fetch remote repo to local repo
	$ git fetch origin //gets all the change history of a tracked branch/repo
	$ git merge origin/main //combine current branch with a specified branch

fetch and merge as one command
	$ git pull
	
view all local and remote branches
	$ git branch -a